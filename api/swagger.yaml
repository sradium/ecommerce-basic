swagger: '2.0'
info:
  description: Documantation of test sergio duran api.
  version: 1.0.0
  title: Test Sergio Duran API
  contact:
    email: sgdurancaro@gmail.com
  license:
    name: MIT
    url: https://github.com/pcca23/TEST-SERGIO-DURAN/blob/main/LICENSE
securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      JWT Authorization header using the Bearer scheme. Example: "Bearer
      {token}"
schemes:
  - http
host: localhost:3000
basePath: /api/v1
produces:
  - application/json

tags:
  - name: authentication
  - name: category
  - name: product
paths:
  /auth/register:
    post:
      summary: Create new user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - lastname
              - email
              - password
            properties:
              name:
                type: string
              lastname:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
        '500':
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - authentication
      description: Create new user
  /auth/login:
    post:
      summary: Login
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
      tags:
        - authentication
      description: Login
  /auth/me:
    get:
      summary: Fetch current user
      security:
        - bearer: []
      responses:
        '200':
          description: Get current user info
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - authentication
      description: Fetch current user
  /categories:
    get:
      summary: List all categories with pagination
      security:
        - bearer: []
      parameters:
        - in: query
          name: page
          type: integer
          required: false
          description: Page
      tags:
        - category
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CategoryList'
    post:
      summary: Create new category
      security:
        - bearer: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
      tags:
        - category
      description: Create new category
  /categories/{id}:
    get:
      summary: Get category by id
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: category id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Category'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - category
      description: Get category by id
    put:
      summary: Update a category
      security:
        - bearer: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: category id
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
      tags:
        - category
      description: Create a category
    delete:
      summary: Delete category by id
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: category id
      security:
        - bearer: []
      responses:
        '204':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - category
      description: Delete category by id
  /categories/{id}/products:
    get:
      summary: List all products by category id
      security:
        - bearer: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: category id
        - in: query
          name: page
          type: integer
          required: false
          description: page
      tags:
        - category
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CategoryProductList'
    post:
      summary: Add a product to a category
      security:
        - bearer: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: category id
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              productIds:
                type: array
                items:
                  type: integer
                example: [1, 2, 3]
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
      tags:
        - category
      description: Add a product to a category
  /products:
    get:
      summary: List all categories with pagination
      security:
        - bearer: []
      parameters:
        - in: query
          name: page
          type: integer
          required: false
          description: Page
      tags:
        - product
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProductList'
    post:
      summary: Create new product
      security:
        - bearer: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - price
              - stock
              - categories
            properties:
              name:
                type: string
              description:
                type: string
              price:
                type: number
              stock:
                type: integer
              image:
                type: string
              categories:
                type: array
                items:
                  type: integer
                example:
                  [1, 2, 3]
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
      tags:
        - product
      description: Create new product
  /products/{id}:
    get:
      summary: Get product by id
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: product id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - product
      description: Get product by id
    put:
      summary: Update a product
      security:
        - bearer: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: product id
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              price:
                type: number
              stock:
                type: integer
              image:
                type: string
              categories:
                type: array
                items:
                  type: integer
                example:
                  [1, 2, 3]
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UnprocessableEntityResponse'
      tags:
        - product
      description: Update a product
    delete:
      summary: Delete product by id
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: product id
      security:
        - bearer: []
      responses:
        '204':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - product
      description: Delete product by id
  /products/{id}/categories:
    get:
      summary: List all categories by category id
      security:
        - bearer: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: product id
        - in: query
          name: page
          type: integer
          required: false
          description: page
      tags:
        - product
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProductCategoryList'
definitions:
  User:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      avatar:
        type: string
  Category:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
  Product:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      price: 
        type: integer
      stock:
        type: integer
      image:
        type: string
  Paginate:
    type: object
    properties:
      page:
        type: integer
      perPage:
        type: integer
      total_items_page:
        type: integer
      total_pages:
        type: integer
      count:
        type: integer
  CategoryList:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Category'
      paginate:
        $ref: '#/definitions/Paginate'
  ProductList:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Product'
      paginate:
        $ref: '#/definitions/Paginate'
  CategoryProductList:
    type: object
    properties:
      items:
        type: object
        properties:
          category:
            $ref: '#/definitions/Category'
          products:
            type: array
            items:
              $ref: '#/definitions/Product'
      paginate:
        $ref: '#/definitions/Paginate'
  ProductCategoryList:
    type: object
    properties:
      items:
        type: object
        properties:
          product:
            $ref: '#/definitions/Product'
          categories:
            type: array
            items:
              $ref: '#/definitions/Category'
      paginate:
        $ref: '#/definitions/Paginate'
  ErrorResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
  SuccessResponse:
    type: object
    properties:
      message:
        type: string
  TokenResponse:
    type: object
    properties:
      token:
        type: string
      refreshToken:
        type: string
      expiresIn:
        type: integer
  UnprocessableEntityResponse:
    type: object
    required:
      - message
      - errors
    properties:
      message:
        type: string
      errors:
        type: array
        items:
          $ref: '#/definitions/UnprocessableEntityResponseItem'
  UnprocessableEntityResponseItem:
    type: object
    properties:
      value:
        type: string
      msg:
        type: string
      param:
        type: string
      location:
        type: string